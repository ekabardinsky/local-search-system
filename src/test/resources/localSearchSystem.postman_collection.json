{
	"id": "ba00d0fc-c018-6d4f-8055-7ed1516ae55f",
	"name": "localSearchSystem",
	"description": "",
	"order": [
		"c6fc4f46-703c-0f67-6cf6-f53763b2c4df"
	],
	"folders": [],
	"timestamp": 1487658578814,
	"owner": "824333",
	"public": false,
	"requests": [
		{
			"id": "c6fc4f46-703c-0f67-6cf6-f53763b2c4df",
			"headers": "Accept-Encoding: utf-8\nContent-Type: application/json\n",
			"url": "http://localhost:8080/api/index",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "ba00d0fc-c018-6d4f-8055-7ed1516ae55f",
			"data": [],
			"dataMode": "raw",
			"name": "http://localhost:8080/api/index",
			"description": "",
			"descriptionFormat": "html",
			"time": 1487662818079,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n\t\"text\": \"Merely setting the target option does not guarantee that your code actually runs on a JRE with the specified version. The pitfall is unintended usage of APIs that only exist in later JREs which would make your code fail at runtime with a linkage error. To avoid this issue, you can either configure the compiler's boot classpath to match the target JRE or use the Animal Sniffer Maven Plugin to verify your code doesn't use unintended APIs. In the same way, setting the source option does not guarantee that your code actually compiles on a JDK with the specified version. To compile your code with a specific JDK version, different than the one used to launch Maven, refer to the Compile Using A Different JDK example.\"\n}"
		}
	]
}